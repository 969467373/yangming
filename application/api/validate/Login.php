<?phpnamespace app\api\validate;use app\common\model\User;use think\Cache;use think\Validate;class Login extends Validate{    protected $rule = [        'username' => 'require',        'phone' => [            'regex'=>'/^1[3|4|5|7|8|9|]\d{9}$/i',            'require',        ],        'password' => 'require|alphaNum',        'confirm_password' => 'require|confirm:password',    ];    protected $message = [        'username.require' => '用户名不能为空',        'password.require' => '密码不能为空',        'password.alphaNum' => '密码只能为字母和数字',        'confirm_password.require' => '确认密码不能为空',        'confirm_password.confirm' => '两次输入的密码不一致',        'phone.require' => '手机号不能为空',        'phone.regex' => '手机号码错误',        'phone.unique' => '手机号已注册',        'user_id.require' => '用户ID不能为空',    ];    protected $scene = [        //密码重置        /*'resetPassword'=>[            'phone' => [                'regex'=>'/^1[3|4|5|7|8|9|]\d{9}$/i',                'require',            ],            'password',            'confirm_password',            'sms_code'=>'require|checkSMSCodeByMobile:reset_password'//rule        ],*/        //登录        'login'=>[            'username',            'password'        ],    ];    /**     * 判断发送间隔     * @param $value     * @param $rule     * @return bool|string     */    protected function checkSendCodeInterval($value, $rule)    {        $cache_key = "interval_{$rule}_{$value}";        if(Cache::has($cache_key))            return "请".config('cache_time.sms_code_interval')."s后重新发送";        return true;    }    // 自定义验证短信验证    protected function checkSMSCodeByMobile($value, $rule, $data)    {        $mobile = $data['phone'];        $key = "{$rule}_{$mobile}";        if (cache($key)==false)            return '验证码已过期,请重新获取';        return ((string)$value == cache($key)) ? true:'验证码错误';    }    //验证用户id是否存在    protected function checkUserExist($value,$rule)    {        $user = new User();        $res = $user->where(['id'=>$value])->value('id');        if (!$res)            return $rule;        return true;    }    protected function checkUserPhoneExist($value)    {        $user = new User();        $res = $user->where(['phone'=>$value])->value('id');        if (!$res)            return '当前手机号未绑定任何用户';        return true;    }    // 自定义验证短信验证    protected function checkUserPhone($value, $rule='origin_phone', $data)    {        $user = new User();        $res = $user->where(['id'=>$value,'phone'=>$data[$rule]])->value('id');        if (!$res)            return '输入的原手机号不是账号的绑定手机号';        return true;    }    // 自定义验证短信验证    protected function checkOriginSMSCodeByMobile($value, $rule, $data)    {        $mobile = $data['origin_phone'];        $key = $rule.$mobile;        if (cache($key)==false)            return '验证码已过期,请重新获取';        return ((string)$value == cache($key)) ? true:'用户身份异常,无权修改数据';    }}