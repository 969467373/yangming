<?phpnamespace app\common\model;use think\Cache;use think\Db;use think\Exception;use think\Session;//任务总流程class TaskFlow extends BaseModel{    function getUser()    {        return $this->belongsTo('User','technologist_id','id');    }    //添加任务主流程    function addFlow($task_id,$technologist_id)    {        self::save([            'task_id'=>$task_id,            'technologist_id'=>$technologist_id        ]);    }    //修改任务主流程    function editFlow($task_id,$data)    {        $this->where('task_id',$task_id)->update($data);    }    //获取新任务列表(普通人员)    /*function getNewTask()    {        $list = $this->alias('f')            ->join('make_beam mb','mb.task_id = f.task_id')            ->join('user u','u.id = mb.user_id')            ->field([                'f.task_id',                'mb.user_id',                'u.name',                'mb.title',                'mb.cross_hole',                'mb.bridge_number',                'mb.bridge_model',                'mb.check_time',            ])            ->where(['f.status'=>0])            ->paginate(6, false, ['query' => request()->get()]);        return $list;    }*/    //(按条件)获取任务列表    function getUserTask($where,$page=1,$user_id)    {        $process = new Process();        $taskProcess = new TaskProcess();        $list = $this->alias('f')            ->join('make_beam mb','mb.task_id = f.task_id','left')            ->join('user u','u.id = mb.user_id','left')            ->field([                'f.task_id',                'mb.user_id',                'u.name',                'mb.title',                'mb.cross_hole',                'mb.bridge_number',                'mb.bridge_model',                'mb.check_time',                'f.finish_time',                'f.process_id',            ])            ->where($where)            ->order('check_time desc')            ->paginate(6, false, ['page'=>$page])            ->toArray();        //用户部门id        $depart = Db::name('user')->where(['id'=>$user_id])->value('department_id');        $wait_doing =[];        //进行的工序        foreach ($list['data'] as &$item)        {            //判断是否同时进行两个工序            if(strstr($item['process_id'],',')){                //工序类型                $item['type']=2;                //分开两个工序的id                $process_arr = explode(',',$item['process_id']);                foreach ($process_arr as $k=>$v){                    //工序名称                    $item['process'][$k] = $process->where(['id'=>$v])->value('title');                    //工序是否限制时长                    $time_limit = $process->where(['id'=>$v])->value('time_limit');                    if ($time_limit == 0){//不限制时长                        $item['process_time'][$k] = 0;                    }else{                        //确认领取时间                        $start_time = $taskProcess->where(['task_id'=>$item['task_id'],'process_id'=>$v])->value('confirm_time');                        //工序状态                        $status = $taskProcess->where(['task_id'=>$item['task_id'],'process_id'=>$v])->value('process_status');                        //已用时间                        $used_time = $taskProcess->where(['task_id'=>$item['task_id'],'process_id'=>$v])->value('used_time');                        if ($status == 1){//进行中                            $item['process_time'][$k] = time()-$start_time + $used_time;                        }else{                            $item['process_time'][$k] = $used_time;                        }                    }                    //该工序参与的部门                    $depart_arr = self::getDoDepart($v);                    //上一步工序是否确认                    $affirm = $taskProcess->where(['task_id'=>$item['task_id'],'process_id'=>$v-1])->value('technologist_affirm');                    if (in_array($depart,$depart_arr)){//该人员参与该工序                        if ($depart == 1){//该人员是技术员                            if ($affirm == 0){//未确认                                $wait_doing[$k] = 1;                            }else{//已确认或已返工                                $wait_doing[$k] = 2;                            }                        }else{//其他人员                            //是否和技术员一起执行任务                            if (in_array(1,$depart_arr)){//一起执行                                if ($affirm == 0){//技术员未确认                                    $wait_doing[$k] = 2;                                }else{//技术员已确认,或已返工                                    $wait_doing[$k] = 1;                                }                            }else{//不一起执行                                $wait_doing[$k] = 1;                            }                        }                    }else{//不参与                        $wait_doing[$k] = 2;                    }                    $item['wait_doing'] = $wait_doing;                }            }else{//只有一个工序                //工序类型                $item['type']=1;                //工序名称                $item['process'][] = $process->where(['id'=>$item['process_id']])->value('title');                //工序是否限制时长                $time_limit = $process->where(['id'=>$item['process_id']])->value('time_limit');                if ($time_limit == 0){//不限制时长                    $item['process_time'][] = 0;                }else {                    //确认领取时间                    $start_time = $taskProcess->where(['task_id'=>$item['task_id'],'process_id'=>$item['process_id']])->value('confirm_time');                    //工序状态                    $status = $taskProcess->where(['task_id'=>$item['task_id'],'process_id'=>$item['process_id']])->value('process_status');                    //已用时间                    $used_time = $taskProcess->where(['task_id'=>$item['task_id'],'process_id'=>$item['process_id']])->value('used_time');                    if ($status == 1){//进行中                        $item['process_time'][] = time()-$start_time + $used_time;                    }else{                        $item['process_time'][] = $used_time;                    }                }                //该工序参与的部门                $depart_arr = self::getDoDepart($item['process_id']);                //上一步工序是否确认                $affirm = $taskProcess->where(['task_id'=>$item['task_id'],'process_id'=>$item['process_id']-1])->value('technologist_affirm');                if (in_array($depart,$depart_arr)){//该人员参与该工序                    if ($depart == 1){//该人员是技术员                        if ($affirm == 0){//未确认                            $wait_doing = [1];                        }else{//已确认或已返工                            $wait_doing = [2];                        }                    }else{//其他人员                        //是否和技术员一起执行任务                        if (in_array(1,$depart_arr)){//一起执行                            if ($affirm == 0){//技术员未确认                                $wait_doing = [2];                            }else{//技术员已确认,或已返工                                //$item['qq'] = $wait_doing;                                $wait_doing = [1];                            }                        }else{//不一起执行                            $wait_doing = [1];                        }                    }                }else{//不参与                    $wait_doing = [2];                }                $item['wait_doing'] = $wait_doing;            }        }        //已完成的任务会有该值        foreach ($list['data'] as &$item){            //完成时间不为0            if ($item['finish_time'] != 0){                //累计用时                $item['accumulat_time'] = $item['finish_time'] - $item['check_time'];            }        }        return $list;    }    //获取任务进度详细信息    public function getDetail($task_id)    {        $user = new User();        $data = $this->alias('f')            ->join('user u','u.id=f.technologist_id','left')            ->field([                'f.task_id',                'f.technologist_id',                'f.rebar_id',                'f.beam_id',                'f.quality_id',                'f.lab_id',                'f.machine_id',                'f.prestress_id',                'f.blend_id',                'f.process_id',                'f.status',                'f.create_time',                'u.name as technologist_name',            ])            ->where('f.task_id',$task_id)            ->find();        $data['rebar_name'] = $user->where('id',$data['rebar_id'])->value('name');        $data['beam_name'] = $user->where('id',$data['beam_id'])->value('name');        $data['quality_name'] = $user->where('id',$data['quality_id'])->value('name');        $data['lab_name'] = $user->where('id',$data['lab_id'])->value('name');        $data['machine_name'] = $user->where('id',$data['machine_id'])->value('name');        $data['prestress_name'] = $user->where('id',$data['prestress_id'])->value('name');        $data['blend_name'] = $user->where('id',$data['blend_id'])->value('name');        return $data;    }    //根据工序获取执行部门    function getDoDepart($process_id)    {        switch ($process_id){            case 1://任务开始                $depatr_arr=[2,3,4,5,6];                break;            case 2://模板清理                $depatr_arr=[3];                break;            case 3://发放预埋件                $depatr_arr=[6];                break;            case 4://预埋件安装                $depatr_arr=[3];                break;            case 5://模板检查验收                $depatr_arr=[1,4];                break;            case 6://钢筋绑扎                $depatr_arr=[2];                break;            case 7://钢筋验收                $depatr_arr=[1,4];                break;            case 8://吊装入模                $depatr_arr=[1,2,3];                break;            case 9://端膜 内膜安装                $depatr_arr=[1,3,4];                break;            case 10://内膜安装检验                $depatr_arr=[1,4];                break;            case 11://发出浇筑令                $depatr_arr=[1];                break;            case 12://开出混凝土配比                $depatr_arr=[3,5];                break;            case 13://准备混凝土设备                $depatr_arr=[8];                break;            case 14://砼浇筑                $depatr_arr=[3];                break;            case 15://砼养护                $depatr_arr=[3];                break;            case 16://拆模通知单                $depatr_arr=[1,4,5];                break;            case 17://拆模                $depatr_arr=[1,3];                break;            case 18://钢绞线穿束                $depatr_arr=[7];                break;            case 19://初张拉通知单                $depatr_arr=[1,5];                break;            case 20://张拉                $depatr_arr=[7];                break;            case 21://起移梁                $depatr_arr=[1,3];                break;            case 22://终张拉通知单                $depatr_arr=[1,5];                break;            case 23://终张拉                $depatr_arr=[1,7];                break;            case 24://割丝通知单                $depatr_arr=[1];                break;            case 25://割丝                $depatr_arr=[7];                break;            case 26://压浆通知单                $depatr_arr=[1];                break;            case 27://压浆                $depatr_arr=[7];                break;            case 28://封端通知单                $depatr_arr=[1];                break;            case 29://封端                $depatr_arr=[7];                break;            case 30://防水涂刷通知单                $depatr_arr=[1];                break;            case 31://涂刷                $depatr_arr=[7];                break;            case 32://成品检验                $depatr_arr=[1,4];                break;            case 33://总任务完成                $depatr_arr=[1];                break;        }        return $depatr_arr;    }}