<?phpnamespace app\common\model;use think\Exception;use think\Session;//用户消息class Message extends BaseModel{    //发布消息    function addMessage($data)    {        $this->allowField(true)->save($data);        return true;    }    //删除消息    function delMessage($where)    {        $this->where($where)->delete();        return true;    }    //获取用户消息(一级页面)    function getTaskMessage($data,$page=1)    {        $where['m.user_id'] = $data['user_id'];        $list = $this->alias('m')            ->join('task t','t.id=m.task_id')            ->field([                't.id as task_id',                't.title',                'm.user_id',                'max(m.create_time) as create_time',            ])            ->where($where)            ->order('m.create_time','desc')            ->group('t.id')            ->paginate(10, false, ['page' => $page])            ->toArray();        //未查看的消息        foreach ($list['data'] as &$item)        {                $where2['task_id'] = $item['task_id'];                $where2['user_id'] = $item['user_id'];                $where2['read_status'] = 0;                $item['new_number'] = $this->where($where2)->count();        }        return  $list;    }    //获取用户消息(二级页面)    function getMessage($data,$page=1)    {        $where['m.user_id'] = $data['user_id'];        $where['m.task_id'] = $data['task_id'];        $list = $this->alias('m')            ->join('make_beam mb','mb.task_id = m.task_id','left')            ->join('user u','u.id = mb.user_id','left')            ->join('process p','p.id = m.process_id','left')            ->field([                'm.id as message_id',                'm.task_id',                'm.process_id',                'p.title as process_title',                'mb.user_id',                'u.name',                'mb.title',                'mb.cross_hole',                'mb.bridge_number',                'mb.bridge_model',                'mb.check_status',                'mb.check_time',                'm.type',                'm.return_id',                'm.remark',                'm.create_time',            ])            ->order('m.create_time desc')            ->where($where)            ->paginate(6, false, ['page' => $page]);        return  $list;    }    //改变消息阅读状态    function changeStatus($data)    {        $this->where(['user_id'=>$data['user_id'], 'task_id'=>$data['task_id']])->setField(['read_status'=>1]);        return true;    }    //获取用户新消息数量    function getNewNumber($user_id)    {        $where['read_status'] = 0;        $where['user_id'] = $user_id;        $num = $this->where($where)->count();        return $num;    }}